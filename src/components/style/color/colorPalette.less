/* stylelint-disable no-duplicate-selectors */
@import "./bezierEasing.less";
@import "./tinyColor.less";

.colorPaletteMixin() {
@functions: ~`(function() {
  var hueStep = 2;
  var saturationStep = 16;
  var saturationStep2 = 5;
  var brightnessStep1 = 5;
  var brightnessStep2 = 15;
  var lightColorCount = 5;
  var darkColorCount = 4;

  function distribute(_a) {
    var value = _a.value, rangeA = _a.rangeA, rangeB = _a.rangeB, limit = _a.limit;
    if (limit === undefined) {
        limit = false;
    }
    var _b = Array.from(rangeA), fromLow = _b[0], fromHigh = _b[1];
    var _c = Array.from(rangeB), toLow = _c[0], toHigh = _c[1];
    var result = toLow + ((value - fromLow) / (fromHigh - fromLow)) * (toHigh - toLow);
    if (limit === true) {
        if (toLow < toHigh) {
            if (result < toLow) {
                return toLow;
            }
            if (result > toHigh) {
                return toHigh;
            }
        }
        else {
            if (result > toLow) {
                return toLow;
            }
            if (result < toHigh) {
                return toHigh;
            }
        }
    }
    return result;
}

  var getHue = function(hsv, i, isLight) {
    var hue;
    if (hsv.h >= 60 && hsv.h <= 240) {
      hue = isLight ? hsv.h - hueStep * i : hsv.h + hueStep * i;
    } else {
      hue = isLight ? hsv.h + hueStep * i : hsv.h - hueStep * i;
    }
    if (hue < 0) {
      hue += 360;
    } else if (hue >= 360) {
      hue -= 360;
    }
    return Math.round(hue);
  };
  var getSaturation = function(hsv, i, isLight) {
    var saturation;
    if (isLight) {
      saturation = Math.round(hsv.s * 100) - saturationStep * i;
    } else if (i === darkColorCount) {
      saturation = Math.round(hsv.s * 100) + saturationStep;
    } else {
      saturation = Math.round(hsv.s * 100) + saturationStep2 * i;
    }
    if (saturation > 100) {
      saturation = 100;
    }
    if (isLight && i === lightColorCount && saturation > 10) {
      saturation = 10;
    }
    if (saturation < 6) {
      saturation = 6;
    }
    return Math.round(saturation);
  };
  var getValue = function(hsv, i, isLight) {
    if (isLight) {
      return Math.round(hsv.v * 100) + brightnessStep1 * i;
    }
    return Math.round(hsv.v * 100) - brightnessStep2 * i;
  };

  var getColorValue = function(start, end, i, timing) {
    var step = transformFunc(timing)(i / 9);
    var result = distribute({
      value: step,
      rangeA: [0, 1],
      rangeB: [
        start,
        end,
      ],
      limit: true,
    });
    return {
      value: result,
      step: step,
    };
  };

  var Color = {
    labConstants: {
      // Corresponds roughly to RGB brighter/darker
      Kn: 18,

      // D65 standard referent
      Xn: 0.950470,
      Yn: 1,
      Zn: 1.088830,

      t0: 0.137931034,  // 4 / 29
      t1: 0.206896552,  // 6 / 29
      t2: 0.12841855,   // 3 * t1 * t1
      t3: 0.008856452,  // t1 * t1 * t1
    },
    unpack: function (args, keyOrder) {
      if ( keyOrder === void 0 ) keyOrder=null;

      // if called with more than 3 arguments, we return the arguments
      if (args.length >= 3) { return Array.prototype.slice.call(args); }
      // with less than 3 args we check if first arg is object
      // and use the keyOrder string to extract and sort properties
      if (type(args[0]) == 'object' && keyOrder) {
          return keyOrder.split('')
              .filter(function (k) { return args[0][k] !== undefined; })
              .map(function (k) { return args[0][k]; });
      }
      // otherwise we just return the first argument
      // (which we suppose is an array of args)
      return args[0];
    },
    xyz_lab: function (t) {
      if (t > Color.labConstants.t3) { return Math.pow(t, 1 / 3); }
      return t / Color.labConstants.t2 + Color.labConstants.t0;
    },
    rgb_xyz: function (r) {
      if ((r /= 255) <= 0.04045) { return r / 12.92; }
      return Math.pow((r + 0.055) / 1.055, 2.4);
    },
    rgb2xyz: function (r,g,b) {
      r = Color.rgb_xyz(r);
      g = Color.rgb_xyz(g);
      b = Color.rgb_xyz(b);
      var x = Color.xyz_lab((0.4124564 * r + 0.3575761 * g + 0.1804375 * b) / Color.labConstants.Xn);
      var y = Color.xyz_lab((0.2126729 * r + 0.7151522 * g + 0.0721750 * b) / Color.labConstants.Yn);
      var z = Color.xyz_lab((0.0193339 * r + 0.1191920 * g + 0.9503041 * b) / Color.labConstants.Zn);
      return [x, y, z];
    },
    rgb2lab: function () {
      var args = [], len = arguments.length;
      while ( len-- ) args[ len ] = arguments[ len ];
      var ref = Color.unpack(args, 'rgb');
      var r = ref[0];
      var g = ref[1];
      var b = ref[2];
      var ref$1 = Color.rgb2xyz(r,g,b);
      var x = ref$1[0];
      var y = ref$1[1];
      var z = ref$1[2];
      var l = 116 * y - 16;
      return [l < 0 ? 0 : l, 500 * (x - y), 200 * (y - z)];
    },
    distance: function(colorLab1, colorLab2) {
      var sum = 0;
      for (var i = 0; i < 3; i++) {
        var d = (colorLab1[i] || 0) - (colorLab2[i] || 0);
        sum += Math.pow(d, 2);
      }
      var result = Math.sqrt(sum);
      return result;
    }
  }

  var adjustColor = function(results, lockHSV) {
    var shortestDistance = 999999;
    var lockedColor;
    var lockedIndex;
    var lastColor = results[results.length - 1];
    var lockedRgb = tinycolor(lockHSV).toRgb();
    var lockedLab = Color.rgb2lab(lockedRgb.r, lockedRgb.g, lockedRgb.b);
    results.forEach(function (color, index) {
      var rgb = tinycolor({
        h: color.hue.value,
        s: color.saturation.value,
        v: color.brightness.value,
      }).toRgb();
      var lab = Color.rgb2lab(rgb.r, rgb.g, rgb.b);
      var d = Color.distance([lab[0], lab[1], lab[2]], [lockedLab[0], lockedLab[1], lockedLab[2]]);
      // if (shortestDistance > d) {
      if (index === 5) {
        shortestDistance = d;
        lockedColor = color;
        lockedIndex = index;
      }
    });


    var difference = {
      hue: lockHSV.h - lockedColor.hue.value,
      saturation: lockHSV.s - lockedColor.saturation.value,
      brightness: lockHSV.v - lockedColor.brightness.value,
    };

    var adjustedColorSet = results.map(function (color, index) {
      if (index < lockedIndex) {
          var hueDifference = distribute({
            value: index,
            rangeA: [0, lockedIndex],
            rangeB: [0, difference.hue],
          });
          var saturationDifference = distribute({
            value: index,
            rangeA: [0, lockedIndex],
            rangeB: [0, difference.saturation],
          });
          var brightnessDifference = distribute({
            value: index,
            rangeA: [0, lockedIndex],
            rangeB: [0, difference.brightness],
          });
          return {
            hue: {
              step: color.hue.step,
              value: color.hue.value + hueDifference > 0
                  ? color.hue.value + hueDifference
                  : 0,
            },
            saturation: {
              step: color.saturation.step,
              value: color.saturation.value + saturationDifference > 0
                  ? (color.saturation.value + saturationDifference > 1 ? 1 : color.saturation.value + saturationDifference)
                  : 0,
            },
            brightness: {
              step: color.brightness.step,
              value: color.brightness.value + brightnessDifference > 0
                  ? (color.brightness.value + brightnessDifference > 1 ? 1 : color.brightness.value + brightnessDifference)
                  : 0,
            },
            step: color.step,
            isMajor: color.isMajor,
            isLocked: false,
        };
      } else if (index === lockedIndex) {
          return {
            hue: { step: color.hue.step, value: lockHSV.h },
            saturation: { step: color.saturation.step, value: lockHSV.s },
            brightness: { step: color.brightness.step, value: lockHSV.v },
            step: color.step,
            isMajor: color.isMajor,
            isLocked: true,
          };
      } else {
        var hueDifference = distribute({
          value: index,
          rangeA: [lockedIndex, lastColor.step],
          rangeB: [difference.hue, 0],
        });
        var saturationDifference = distribute({
          value: index,
          rangeA: [lockedIndex, lastColor.step],
          rangeB: [difference.saturation, 0],
        });
        var brightnessDifference = distribute({
          value: index,
          rangeA: [lockedIndex, lastColor.step],
          rangeB: [difference.brightness, 0],
        });
        return {
          hue: {
            step: color.hue.step,
            value: color.hue.value + hueDifference > 0 ||
                color.hue.value + hueDifference < 360
                ? color.hue.value + hueDifference
                : 0,
          },
          saturation: {
            step: color.saturation.step,
            value: color.saturation.value + saturationDifference < 1
                ? color.saturation.value + saturationDifference
                : 1,
          },
          brightness: {
            step: color.brightness.step,
            value: color.brightness.value + brightnessDifference < 1
                ? color.brightness.value + brightnessDifference
                : 1,
          },
          step: color.step,
          isMajor: color.isMajor,
          isLocked: false,
        };
      }
    });
    return adjustedColorSet;
  }



  var limit = function (x, min, max) {
    if ( min === void 0 ) min=0;
    if ( max === void 0 ) max=1;
    return x < min ? min : x > max ? max : x;
  };

  var clip_rgb = function (rgb) {
    rgb._clipped = false;
    rgb._unclipped = rgb.slice(0);
    for (var i=0; i<=3; i++) {
        if (i < 3) {
            if (rgb[i] < 0 || rgb[i] > 255) { rgb._clipped = true; }
            rgb[i] = limit(rgb[i], 0, 255);
        } else if (i === 3) {
            rgb[i] = limit(rgb[i], 0, 1);
        }
    }
    return rgb;
  };



  var colorPalette = function(color, index) {
    var hsv = tinycolor(color).toHsv();
    var h = hsv.h; //347
    var colors = [];
    for (var i = 0; i < 10; i++) {
      var hue = getColorValue(h, h, i, 'easeInQuad');
      var saturation = getColorValue(0.08, 0.95, i, 'easeOutQuad');
      var brightness = getColorValue(1, 0.35, i, 'easeInSine');
      colors.push({
        hue,
        saturation,
        brightness,
        step: i,
      });
    }

    var results = adjustColor(colors, hsv); //colors;
    var hexColors = results.map(function (item) {
      return tinycolor({
        h: item.hue.value,
        s: item.saturation.value,
        v: item.brightness.value,
      }).toHexString();
    });
    var result = hexColors[index - 1];
    return result;
  }
  this.colorPalette = colorPalette;
})()`;
}
.colorPaletteMixin();
